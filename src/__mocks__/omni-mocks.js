// Generated OmniFocus API Mocks
// This file is auto-generated by generate-api.js
// DO NOT EDIT THIS FILE DIRECTLY

import { jest } from '@jest/globals';

// Mock for Alert
const Alert = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addOption: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default Alert;

// Mock for ApplyResult
const ApplyResult = {
    prototype: {
        SkipChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        SkipPeers: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Stop: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get SkipChildren() {
            return jest.fn().mockReturnValue(null)();
        },
        get SkipPeers() {
            return jest.fn().mockReturnValue(null)();
        },
        get Stop() {
            return jest.fn().mockReturnValue(null)();
        },
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default ApplyResult;

// Mock for FolderArray
// Extends Array
const FolderArray = {
    prototype: {
        byName: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default FolderArray;

// Mock for ProjectArray
// Extends Array
const ProjectArray = {
    prototype: {
        byName: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default ProjectArray;

// Mock for SectionArray
// Extends Array
const SectionArray = {
    prototype: {
        byName: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default SectionArray;

// Mock for Library
// Extends SectionArray
const Library = {
    prototype: {
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beginning: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ending: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get beginning() {
            return jest.fn().mockReturnValue(null)();
        },
        get ending() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Library;

// Mock for TagArray
// Extends Array
const TagArray = {
    prototype: {
        byName: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default TagArray;

// Mock for Tags
// Extends TagArray
const Tags = {
    prototype: {
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beginning: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ending: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get beginning() {
            return jest.fn().mockReturnValue(null)();
        },
        get ending() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Tags;

// Mock for TaskArray
// Extends Array
const TaskArray = {
    prototype: {
        byName: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default TaskArray;

// Mock for Inbox
// Extends TaskArray
const Inbox = {
    prototype: {
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beginning: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ending: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get beginning() {
            return jest.fn().mockReturnValue(null)();
        },
        get ending() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Inbox;

// Mock for Audio
const Audio = {
    prototype: {
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default Audio;

// Mock for Color
const Color = {
    prototype: {
        RGB: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        HSB: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        White: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        black: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        blue: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        brown: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        clear: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        cyan: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        darkGray: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        gray: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        green: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        lightGray: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        magenta: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        orange: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        purple: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        red: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        white: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        yellow: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        blend: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        alpha: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        brightness: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        colorSpace: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hue: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        saturation: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get black() {
            return jest.fn().mockReturnValue(null)();
        },
        get blue() {
            return jest.fn().mockReturnValue(null)();
        },
        get brown() {
            return jest.fn().mockReturnValue(null)();
        },
        get clear() {
            return jest.fn().mockReturnValue(null)();
        },
        get cyan() {
            return jest.fn().mockReturnValue(null)();
        },
        get darkGray() {
            return jest.fn().mockReturnValue(null)();
        },
        get gray() {
            return jest.fn().mockReturnValue(null)();
        },
        get green() {
            return jest.fn().mockReturnValue(null)();
        },
        get lightGray() {
            return jest.fn().mockReturnValue(null)();
        },
        get magenta() {
            return jest.fn().mockReturnValue(null)();
        },
        get orange() {
            return jest.fn().mockReturnValue(null)();
        },
        get purple() {
            return jest.fn().mockReturnValue(null)();
        },
        get red() {
            return jest.fn().mockReturnValue(null)();
        },
        get white() {
            return jest.fn().mockReturnValue(null)();
        },
        get yellow() {
            return jest.fn().mockReturnValue(null)();
        },
        get alpha() {
            return jest.fn().mockReturnValue(null)();
        },
        get brightness() {
            return jest.fn().mockReturnValue(null)();
        },
        get colorSpace() {
            return jest.fn().mockReturnValue(null)();
        },
        get hue() {
            return jest.fn().mockReturnValue(null)();
        },
        get saturation() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Color;

// Mock for ColorSpace
const ColorSpace = {
    prototype: {
        CMYK: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        HSB: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Named: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Pattern: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        RGB: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        White: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get CMYK() {
            return jest.fn().mockReturnValue(null)();
        },
        get HSB() {
            return jest.fn().mockReturnValue(null)();
        },
        get Named() {
            return jest.fn().mockReturnValue(null)();
        },
        get Pattern() {
            return jest.fn().mockReturnValue(null)();
        },
        get RGB() {
            return jest.fn().mockReturnValue(null)();
        },
        get White() {
            return jest.fn().mockReturnValue(null)();
        },
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default ColorSpace;

// Mock for CombinedValues
const CombinedValues = {
    prototype: {
        name: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        values: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get name() {
            return jest.fn().mockReturnValue(null)();
        },
        get values() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default CombinedValues;

// Mock for Console
const Console = {
    prototype: {
        log: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        error: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        info: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        warn: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        clear: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default Console;

// Mock for Credentials
const Credentials = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        read: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        write: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        remove: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        readBookmark: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        writeBookmark: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default Credentials;

// Mock for Crypto
const Crypto = {
    prototype: {
        randomData: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default Crypto;

// Mock for Data
const Data = {
    prototype: {
        fromString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fromBase64: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        toString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        toBase64: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        length: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        toObject: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get length() {
            return jest.fn().mockReturnValue(null)();
        },
        get toObject() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Data;

// Mock for Database
const Database = {
    prototype: {
        objectForURL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tagNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        folderNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        projectNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        projectsMatching: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        foldersMatching: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tagsMatching: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        taskNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        save: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        moveTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        duplicateTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        convertTasksToProjects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        moveSections: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        duplicateSections: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        moveTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        duplicateTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        cleanUp: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        undo: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        redo: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        deleteObject: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        copyTasksToPasteboard: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        canPasteTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        pasteTasksFromPasteboard: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        app: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        baseStyle: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        canRedo: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        canUndo: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        console: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        document: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedFolders: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedProjects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedSections: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        folders: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        inbox: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        library: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        projects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        settings: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get app() {
            return jest.fn().mockReturnValue(null)();
        },
        get baseStyle() {
            return jest.fn().mockReturnValue(null)();
        },
        get canRedo() {
            return jest.fn().mockReturnValue(null)();
        },
        get canUndo() {
            return jest.fn().mockReturnValue(null)();
        },
        get console() {
            return jest.fn().mockReturnValue(null)();
        },
        get document() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedFolders() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedProjects() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedSections() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedTags() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedTasks() {
            return jest.fn().mockReturnValue(null)();
        },
        get folders() {
            return jest.fn().mockReturnValue(null)();
        },
        get inbox() {
            return jest.fn().mockReturnValue(null)();
        },
        get library() {
            return jest.fn().mockReturnValue(null)();
        },
        get projects() {
            return jest.fn().mockReturnValue(null)();
        },
        get settings() {
            return jest.fn().mockReturnValue(null)();
        },
        get tags() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Database;

// Mock for DatabaseObject
const DatabaseObject = {
    prototype: {
        id: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        url: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get id() {
            return jest.fn().mockReturnValue(null)();
        },
        get url() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default DatabaseObject;

// Mock for DatedObject
// Extends DatabaseObject
const DatedObject = {
    prototype: {
        added: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        modified: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get added() {
            return jest.fn().mockReturnValue(null)();
        },
        get modified() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default DatedObject;

// Mock for ActiveObject
// Extends DatedObject
const ActiveObject = {
    prototype: {
        active: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveActive: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get active() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveActive() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default ActiveObject;

// Mock for Folder
// Extends ActiveObject
const Folder = {
    prototype: {
        byIdentifier: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        folderNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        projectNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        sectionNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        childNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        after: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        before: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beginning: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        children: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ending: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedFolders: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedProjects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedSections: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        folders: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        name: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        parent: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        projects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        sections: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        status: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get after() {
            return jest.fn().mockReturnValue(null)();
        },
        get before() {
            return jest.fn().mockReturnValue(null)();
        },
        get beginning() {
            return jest.fn().mockReturnValue(null)();
        },
        get children() {
            return jest.fn().mockReturnValue(null)();
        },
        get ending() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedChildren() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedFolders() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedProjects() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedSections() {
            return jest.fn().mockReturnValue(null)();
        },
        get folders() {
            return jest.fn().mockReturnValue(null)();
        },
        get name() {
            return jest.fn().mockReturnValue(null)();
        },
        get parent() {
            return jest.fn().mockReturnValue(null)();
        },
        get projects() {
            return jest.fn().mockReturnValue(null)();
        },
        get sections() {
            return jest.fn().mockReturnValue(null)();
        },
        get status() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Folder;

// Mock for Tag
// Extends ActiveObject
const Tag = {
    prototype: {
        byIdentifier: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        forecastTag: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tagNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        childNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beforeTask: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        afterTask: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        moveTask: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        moveTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        after: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        allowsNextAction: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        availableTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        before: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beginning: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beginningOfTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        children: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ending: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        endingOfTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        name: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        parent: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        projects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        remainingTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        status: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get forecastTag() {
            return jest.fn().mockReturnValue(null)();
        },
        get after() {
            return jest.fn().mockReturnValue(null)();
        },
        get allowsNextAction() {
            return jest.fn().mockReturnValue(null)();
        },
        get availableTasks() {
            return jest.fn().mockReturnValue(null)();
        },
        get before() {
            return jest.fn().mockReturnValue(null)();
        },
        get beginning() {
            return jest.fn().mockReturnValue(null)();
        },
        get beginningOfTasks() {
            return jest.fn().mockReturnValue(null)();
        },
        get children() {
            return jest.fn().mockReturnValue(null)();
        },
        get ending() {
            return jest.fn().mockReturnValue(null)();
        },
        get endingOfTasks() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedChildren() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedTags() {
            return jest.fn().mockReturnValue(null)();
        },
        get name() {
            return jest.fn().mockReturnValue(null)();
        },
        get parent() {
            return jest.fn().mockReturnValue(null)();
        },
        get projects() {
            return jest.fn().mockReturnValue(null)();
        },
        get remainingTasks() {
            return jest.fn().mockReturnValue(null)();
        },
        get status() {
            return jest.fn().mockReturnValue(null)();
        },
        get tags() {
            return jest.fn().mockReturnValue(null)();
        },
        get tasks() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Tag;

// Mock for Task
// Extends ActiveObject
const Task = {
    prototype: {
        byParsingTransportText: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        byIdentifier: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        taskNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        childNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        appendStringToNote: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addLinkedFileURL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeLinkedFileWithURL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addAttachment: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeAttachmentAtIndex: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beforeTag: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        afterTag: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addTag: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        moveTag: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        moveTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeTag: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        clearTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        markComplete: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        markIncomplete: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        drop: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addNotification: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeNotification: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        after: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        assignedContainer: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        attachments: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        before: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beginning: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beginningOfTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        children: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        completed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        completedByChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        completionDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        containingProject: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        deferDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        dropDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        dueDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveCompletedDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveCompletionDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveDeferDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveDropDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveDueDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveFlagged: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ending: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        endingOfTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        estimatedMinutes: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flagged: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hasChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        inInbox: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        linkedFileURLs: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        name: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        note: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        noteText: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        notifications: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        parent: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        project: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        repetitionRule: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        sequential: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        shouldUseFloatingTimeZone: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        taskStatus: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get after() {
            return jest.fn().mockReturnValue(null)();
        },
        get assignedContainer() {
            return jest.fn().mockReturnValue(null)();
        },
        get attachments() {
            return jest.fn().mockReturnValue(null)();
        },
        get before() {
            return jest.fn().mockReturnValue(null)();
        },
        get beginning() {
            return jest.fn().mockReturnValue(null)();
        },
        get beginningOfTags() {
            return jest.fn().mockReturnValue(null)();
        },
        get children() {
            return jest.fn().mockReturnValue(null)();
        },
        get completed() {
            return jest.fn().mockReturnValue(null)();
        },
        get completedByChildren() {
            return jest.fn().mockReturnValue(null)();
        },
        get completionDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get containingProject() {
            return jest.fn().mockReturnValue(null)();
        },
        get deferDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get dropDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get dueDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveCompletedDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveCompletionDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveDeferDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveDropDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveDueDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveFlagged() {
            return jest.fn().mockReturnValue(null)();
        },
        get ending() {
            return jest.fn().mockReturnValue(null)();
        },
        get endingOfTags() {
            return jest.fn().mockReturnValue(null)();
        },
        get estimatedMinutes() {
            return jest.fn().mockReturnValue(null)();
        },
        get flagged() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedChildren() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedTasks() {
            return jest.fn().mockReturnValue(null)();
        },
        get hasChildren() {
            return jest.fn().mockReturnValue(null)();
        },
        get inInbox() {
            return jest.fn().mockReturnValue(null)();
        },
        get linkedFileURLs() {
            return jest.fn().mockReturnValue(null)();
        },
        get name() {
            return jest.fn().mockReturnValue(null)();
        },
        get note() {
            return jest.fn().mockReturnValue(null)();
        },
        get noteText() {
            return jest.fn().mockReturnValue(null)();
        },
        get notifications() {
            return jest.fn().mockReturnValue(null)();
        },
        get parent() {
            return jest.fn().mockReturnValue(null)();
        },
        get project() {
            return jest.fn().mockReturnValue(null)();
        },
        get repetitionRule() {
            return jest.fn().mockReturnValue(null)();
        },
        get sequential() {
            return jest.fn().mockReturnValue(null)();
        },
        get shouldUseFloatingTimeZone() {
            return jest.fn().mockReturnValue(null)();
        },
        get tags() {
            return jest.fn().mockReturnValue(null)();
        },
        get taskStatus() {
            return jest.fn().mockReturnValue(null)();
        },
        get tasks() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Task;

// Mock for Project
// Extends DatabaseObject
const Project = {
    prototype: {
        byIdentifier: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        taskNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        appendStringToNote: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addAttachment: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeAttachmentAtIndex: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        markComplete: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        markIncomplete: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addNotification: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeNotification: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addTag: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeTag: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        clearTags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addLinkedFileURL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeLinkedFileWithURL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        after: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        attachments: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        before: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        beginning: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        children: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        completed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        completedByChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        completionDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        containsSingletonActions: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        defaultSingletonActionHolder: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        deferDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        dropDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        dueDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveCompletedDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveDeferDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveDropDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveDueDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        effectiveFlagged: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ending: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        estimatedMinutes: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flagged: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        flattenedTasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hasChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        lastReviewDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        linkedFileURLs: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        name: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        nextReviewDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        nextTask: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        note: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        noteText: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        notifications: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        parentFolder: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        repetitionRule: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        reviewInterval: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        sequential: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        shouldUseFloatingTimeZone: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        status: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        task: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        taskStatus: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get after() {
            return jest.fn().mockReturnValue(null)();
        },
        get attachments() {
            return jest.fn().mockReturnValue(null)();
        },
        get before() {
            return jest.fn().mockReturnValue(null)();
        },
        get beginning() {
            return jest.fn().mockReturnValue(null)();
        },
        get children() {
            return jest.fn().mockReturnValue(null)();
        },
        get completed() {
            return jest.fn().mockReturnValue(null)();
        },
        get completedByChildren() {
            return jest.fn().mockReturnValue(null)();
        },
        get completionDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get containsSingletonActions() {
            return jest.fn().mockReturnValue(null)();
        },
        get defaultSingletonActionHolder() {
            return jest.fn().mockReturnValue(null)();
        },
        get deferDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get dropDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get dueDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveCompletedDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveDeferDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveDropDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveDueDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get effectiveFlagged() {
            return jest.fn().mockReturnValue(null)();
        },
        get ending() {
            return jest.fn().mockReturnValue(null)();
        },
        get estimatedMinutes() {
            return jest.fn().mockReturnValue(null)();
        },
        get flagged() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedChildren() {
            return jest.fn().mockReturnValue(null)();
        },
        get flattenedTasks() {
            return jest.fn().mockReturnValue(null)();
        },
        get hasChildren() {
            return jest.fn().mockReturnValue(null)();
        },
        get lastReviewDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get linkedFileURLs() {
            return jest.fn().mockReturnValue(null)();
        },
        get name() {
            return jest.fn().mockReturnValue(null)();
        },
        get nextReviewDate() {
            return jest.fn().mockReturnValue(null)();
        },
        get nextTask() {
            return jest.fn().mockReturnValue(null)();
        },
        get note() {
            return jest.fn().mockReturnValue(null)();
        },
        get noteText() {
            return jest.fn().mockReturnValue(null)();
        },
        get notifications() {
            return jest.fn().mockReturnValue(null)();
        },
        get parentFolder() {
            return jest.fn().mockReturnValue(null)();
        },
        get repetitionRule() {
            return jest.fn().mockReturnValue(null)();
        },
        get reviewInterval() {
            return jest.fn().mockReturnValue(null)();
        },
        get sequential() {
            return jest.fn().mockReturnValue(null)();
        },
        get shouldUseFloatingTimeZone() {
            return jest.fn().mockReturnValue(null)();
        },
        get status() {
            return jest.fn().mockReturnValue(null)();
        },
        get tags() {
            return jest.fn().mockReturnValue(null)();
        },
        get task() {
            return jest.fn().mockReturnValue(null)();
        },
        get taskStatus() {
            return jest.fn().mockReturnValue(null)();
        },
        get tasks() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Project;

// Mock for DateComponents
const DateComponents = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        date: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        day: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        era: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hour: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        minute: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        month: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        nanosecond: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        second: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        timeZone: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        year: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get date() {
            return jest.fn().mockReturnValue(null)();
        },
        get day() {
            return jest.fn().mockReturnValue(null)();
        },
        get era() {
            return jest.fn().mockReturnValue(null)();
        },
        get hour() {
            return jest.fn().mockReturnValue(null)();
        },
        get minute() {
            return jest.fn().mockReturnValue(null)();
        },
        get month() {
            return jest.fn().mockReturnValue(null)();
        },
        get nanosecond() {
            return jest.fn().mockReturnValue(null)();
        },
        get second() {
            return jest.fn().mockReturnValue(null)();
        },
        get timeZone() {
            return jest.fn().mockReturnValue(null)();
        },
        get year() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default DateComponents;

// Mock for DateRange
const DateRange = {
    prototype: {
        end: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        name: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        start: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get end() {
            return jest.fn().mockReturnValue(null)();
        },
        get name() {
            return jest.fn().mockReturnValue(null)();
        },
        get start() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default DateRange;

// Mock for Decimal
const Decimal = {
    prototype: {
        fromString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        maximum: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        minimum: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        notANumber: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        one: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        zero: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        toString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        add: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        subtract: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        multiply: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        divide: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        compare: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        equals: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get maximum() {
            return jest.fn().mockReturnValue(null)();
        },
        get minimum() {
            return jest.fn().mockReturnValue(null)();
        },
        get notANumber() {
            return jest.fn().mockReturnValue(null)();
        },
        get one() {
            return jest.fn().mockReturnValue(null)();
        },
        get zero() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Decimal;

// Mock for DeviceType
const DeviceType = {
    prototype: {
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        iPad: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        iPhone: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        mac: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        visionPro: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
        get iPad() {
            return jest.fn().mockReturnValue(null)();
        },
        get iPhone() {
            return jest.fn().mockReturnValue(null)();
        },
        get mac() {
            return jest.fn().mockReturnValue(null)();
        },
        get visionPro() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default DeviceType;

// Mock for Document
const Document = {
    prototype: {
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        save: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fileWrapper: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        makeFileWrapper: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        undo: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        redo: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        canRedo: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        canUndo: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fileType: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        name: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        writableTypes: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get canRedo() {
            return jest.fn().mockReturnValue(null)();
        },
        get canUndo() {
            return jest.fn().mockReturnValue(null)();
        },
        get fileType() {
            return jest.fn().mockReturnValue(null)();
        },
        get name() {
            return jest.fn().mockReturnValue(null)();
        },
        get writableTypes() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Document;

// Mock for DatabaseDocument
// Extends Document
const DatabaseDocument = {
    prototype: {
        newWindow: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        newTabOnWindow: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        sync: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        windows: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get windows() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default DatabaseDocument;

// Mock for Email
const Email = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        generate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        blindCarbonCopy: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        body: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        carbonCopy: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fileWrappers: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        receiver: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        subject: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get blindCarbonCopy() {
            return jest.fn().mockReturnValue(null)();
        },
        get body() {
            return jest.fn().mockReturnValue(null)();
        },
        get carbonCopy() {
            return jest.fn().mockReturnValue(null)();
        },
        get fileWrappers() {
            return jest.fn().mockReturnValue(null)();
        },
        get receiver() {
            return jest.fn().mockReturnValue(null)();
        },
        get subject() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Email;

// Mock for FilePicker
const FilePicker = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        show: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        folders: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        message: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        multiple: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        types: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get folders() {
            return jest.fn().mockReturnValue(null)();
        },
        get message() {
            return jest.fn().mockReturnValue(null)();
        },
        get multiple() {
            return jest.fn().mockReturnValue(null)();
        },
        get types() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default FilePicker;

// Mock for FileSaver
const FileSaver = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        show: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        message: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        nameLabel: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        prompt: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        types: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get message() {
            return jest.fn().mockReturnValue(null)();
        },
        get nameLabel() {
            return jest.fn().mockReturnValue(null)();
        },
        get prompt() {
            return jest.fn().mockReturnValue(null)();
        },
        get types() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default FileSaver;

// Mock for FileWrapper
const FileWrapper = {
    prototype: {
        withContents: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        withChildren: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fromURL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        childNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        filenameForChild: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        write: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        children: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        contents: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        destination: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        filename: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        preferredFilename: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        type: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get children() {
            return jest.fn().mockReturnValue(null)();
        },
        get contents() {
            return jest.fn().mockReturnValue(null)();
        },
        get destination() {
            return jest.fn().mockReturnValue(null)();
        },
        get filename() {
            return jest.fn().mockReturnValue(null)();
        },
        get preferredFilename() {
            return jest.fn().mockReturnValue(null)();
        },
        get type() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default FileWrapper;

// Mock for ForecastDay
const ForecastDay = {
    prototype: {
        badgeCountsIncludeDeferredItems: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        badgeKind: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        badgeCount: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        date: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        deferredCount: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        kind: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        name: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get badgeCountsIncludeDeferredItems() {
            return jest.fn().mockReturnValue(null)();
        },
        get badgeCount() {
            return jest.fn().mockReturnValue(null)();
        },
        get date() {
            return jest.fn().mockReturnValue(null)();
        },
        get deferredCount() {
            return jest.fn().mockReturnValue(null)();
        },
        get kind() {
            return jest.fn().mockReturnValue(null)();
        },
        get name() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default ForecastDay;

// Mock for Form
const Form = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addField: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeField: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        show: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fields: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        performed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        values: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get fields() {
            return jest.fn().mockReturnValue(null)();
        },
        get validate() {
            return jest.fn().mockReturnValue(null)();
        },
        get values() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Form;

// Mock for Formatter
const Formatter = {
};

export default Formatter;

// Mock for Image
const Image = {
    prototype: {
        symbolNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default Image;

// Mock for LigatureStyle
const LigatureStyle = {
    prototype: {
        All: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Essential: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Standard: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get All() {
            return jest.fn().mockReturnValue(null)();
        },
        get Essential() {
            return jest.fn().mockReturnValue(null)();
        },
        get Standard() {
            return jest.fn().mockReturnValue(null)();
        },
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default LigatureStyle;

// Mock for Locale
const Locale = {
    prototype: {
        identifiers: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        calendar: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        currencyCode: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        identifier: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get identifiers() {
            return jest.fn().mockReturnValue(null)();
        },
        get calendar() {
            return jest.fn().mockReturnValue(null)();
        },
        get currencyCode() {
            return jest.fn().mockReturnValue(null)();
        },
        get identifier() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Locale;

// Mock for MenuItem
const MenuItem = {
    prototype: {
        checked: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        image: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        label: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get checked() {
            return jest.fn().mockReturnValue(null)();
        },
        get image() {
            return jest.fn().mockReturnValue(null)();
        },
        get label() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default MenuItem;

// Mock for NamedStylePosition
const NamedStylePosition = {
};

export default NamedStylePosition;

// Mock for Notification
const Notification = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        show: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        subtitle: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        title: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get subtitle() {
            return jest.fn().mockReturnValue(null)();
        },
        get title() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Notification;

// Mock for ObjectIdentifier
const ObjectIdentifier = {
    prototype: {
        objectClass: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        primaryKey: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get objectClass() {
            return jest.fn().mockReturnValue(null)();
        },
        get primaryKey() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default ObjectIdentifier;

// Mock for Pasteboard
const Pasteboard = {
    prototype: {
        makeUnique: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        general: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        availableType: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addItems: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        clear: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        dataForType: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        setDataForType: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        stringForType: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        setStringForType: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        URL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        URLs: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        color: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        colors: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hasColors: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hasImages: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hasStrings: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hasURLs: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        image: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        images: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        items: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        string: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        strings: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        types: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get general() {
            return jest.fn().mockReturnValue(null)();
        },
        get URL() {
            return jest.fn().mockReturnValue(null)();
        },
        get URLs() {
            return jest.fn().mockReturnValue(null)();
        },
        get color() {
            return jest.fn().mockReturnValue(null)();
        },
        get colors() {
            return jest.fn().mockReturnValue(null)();
        },
        get hasColors() {
            return jest.fn().mockReturnValue(null)();
        },
        get hasImages() {
            return jest.fn().mockReturnValue(null)();
        },
        get hasStrings() {
            return jest.fn().mockReturnValue(null)();
        },
        get hasURLs() {
            return jest.fn().mockReturnValue(null)();
        },
        get image() {
            return jest.fn().mockReturnValue(null)();
        },
        get images() {
            return jest.fn().mockReturnValue(null)();
        },
        get items() {
            return jest.fn().mockReturnValue(null)();
        },
        get string() {
            return jest.fn().mockReturnValue(null)();
        },
        get strings() {
            return jest.fn().mockReturnValue(null)();
        },
        get types() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Pasteboard;

// Mock for Perspective
const Perspective = {
    prototype: {
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        favorites: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
        get favorites() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Perspective;

// Mock for PlugIn
const PlugIn = {
    prototype: {
        find: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        library: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        action: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        handler: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        resourceNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        imageNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        localizedResourceNamed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        URL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        actions: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        author: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        description: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        displayName: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        handlers: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        identifier: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        libraries: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        version: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
        get URL() {
            return jest.fn().mockReturnValue(null)();
        },
        get actions() {
            return jest.fn().mockReturnValue(null)();
        },
        get author() {
            return jest.fn().mockReturnValue(null)();
        },
        get description() {
            return jest.fn().mockReturnValue(null)();
        },
        get displayName() {
            return jest.fn().mockReturnValue(null)();
        },
        get handlers() {
            return jest.fn().mockReturnValue(null)();
        },
        get identifier() {
            return jest.fn().mockReturnValue(null)();
        },
        get libraries() {
            return jest.fn().mockReturnValue(null)();
        },
        get version() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default PlugIn;

// Mock for Preferences
const Preferences = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        read: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        readBoolean: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        readString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        readNumber: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        readDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        readData: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        write: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        remove: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        identifier: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get identifier() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Preferences;

// Mock for QuickOpenScriptAction
const QuickOpenScriptAction = {
    prototype: {
        image: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        label: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get image() {
            return jest.fn().mockReturnValue(null)();
        },
        get label() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default QuickOpenScriptAction;

// Mock for Selection
const Selection = {
    prototype: {
        allObjects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        database: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        databaseObjects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        document: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        folders: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        projects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tags: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        window: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get allObjects() {
            return jest.fn().mockReturnValue(null)();
        },
        get database() {
            return jest.fn().mockReturnValue(null)();
        },
        get databaseObjects() {
            return jest.fn().mockReturnValue(null)();
        },
        get document() {
            return jest.fn().mockReturnValue(null)();
        },
        get folders() {
            return jest.fn().mockReturnValue(null)();
        },
        get projects() {
            return jest.fn().mockReturnValue(null)();
        },
        get tags() {
            return jest.fn().mockReturnValue(null)();
        },
        get tasks() {
            return jest.fn().mockReturnValue(null)();
        },
        get window() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Selection;

// Mock for Settings
const Settings = {
    prototype: {
        defaultObjectForKey: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hasNonDefaultObjectForKey: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        objectForKey: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        setObjectForKey: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        boolForKey: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        setBoolForKey: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        integerForKey: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        setIntegerForKey: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        keys: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get keys() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Settings;

// Mock for SharePanel
const SharePanel = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addItem: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addItems: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeItem: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeItems: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        clearItems: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        show: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        items: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get items() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default SharePanel;

// Mock for Speech
const Speech = {
};

export default Speech;

// Mock for StringEncoding
const StringEncoding = {
    prototype: {
        ASCII: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ISO2022JP: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ISOLatin1: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ISOLatin2: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        JapaneseEUC: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        MacOSRoman: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        NextStep: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        NonLossyASCII: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ShiftJIS: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Symbol: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        UTF16: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        UTF16BigEndian: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        UTF16LittleEndian: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        UTF32: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        UTF32BigEndian: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        UTF32LittleEndian: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        UTF8: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Unicode: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        WindowsCP1250: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        WindowsCP1251: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        WindowsCP1252: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        WindowsCP1253: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        WindowsCP1254: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get ASCII() {
            return jest.fn().mockReturnValue(null)();
        },
        get ISO2022JP() {
            return jest.fn().mockReturnValue(null)();
        },
        get ISOLatin1() {
            return jest.fn().mockReturnValue(null)();
        },
        get ISOLatin2() {
            return jest.fn().mockReturnValue(null)();
        },
        get JapaneseEUC() {
            return jest.fn().mockReturnValue(null)();
        },
        get MacOSRoman() {
            return jest.fn().mockReturnValue(null)();
        },
        get NextStep() {
            return jest.fn().mockReturnValue(null)();
        },
        get NonLossyASCII() {
            return jest.fn().mockReturnValue(null)();
        },
        get ShiftJIS() {
            return jest.fn().mockReturnValue(null)();
        },
        get Symbol() {
            return jest.fn().mockReturnValue(null)();
        },
        get UTF16() {
            return jest.fn().mockReturnValue(null)();
        },
        get UTF16BigEndian() {
            return jest.fn().mockReturnValue(null)();
        },
        get UTF16LittleEndian() {
            return jest.fn().mockReturnValue(null)();
        },
        get UTF32() {
            return jest.fn().mockReturnValue(null)();
        },
        get UTF32BigEndian() {
            return jest.fn().mockReturnValue(null)();
        },
        get UTF32LittleEndian() {
            return jest.fn().mockReturnValue(null)();
        },
        get UTF8() {
            return jest.fn().mockReturnValue(null)();
        },
        get Unicode() {
            return jest.fn().mockReturnValue(null)();
        },
        get WindowsCP1250() {
            return jest.fn().mockReturnValue(null)();
        },
        get WindowsCP1251() {
            return jest.fn().mockReturnValue(null)();
        },
        get WindowsCP1252() {
            return jest.fn().mockReturnValue(null)();
        },
        get WindowsCP1253() {
            return jest.fn().mockReturnValue(null)();
        },
        get WindowsCP1254() {
            return jest.fn().mockReturnValue(null)();
        },
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default StringEncoding;

// Mock for Style
const Style = {
    prototype: {
        set: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        localValueForAttribute: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        addNamedStyle: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        removeNamedStyle: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        influencedBy: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        setStyle: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        clear: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fontFillColor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        link: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        locallyDefinedAttributes: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        namedStyles: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get fontFillColor() {
            return jest.fn().mockReturnValue(null)();
        },
        get link() {
            return jest.fn().mockReturnValue(null)();
        },
        get locallyDefinedAttributes() {
            return jest.fn().mockReturnValue(null)();
        },
        get namedStyles() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Style;

// Mock for NamedStyle
// Extends Style
const NamedStyle = {
    prototype: {
        remove: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        after: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        before: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        identifier: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        name: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get after() {
            return jest.fn().mockReturnValue(null)();
        },
        get before() {
            return jest.fn().mockReturnValue(null)();
        },
        get identifier() {
            return jest.fn().mockReturnValue(null)();
        },
        get name() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default NamedStyle;

// Mock for Text
const Text = {
    prototype: {
        makeFileAttachment: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        textInRange: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        styleForRange: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ranges: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        replace: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        append: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        insert: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        remove: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        find: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        attachments: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        attributeRuns: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        characters: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        end: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fileWrapper: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        paragraphs: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        range: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        sentences: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        start: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        string: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        style: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        words: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get attachments() {
            return jest.fn().mockReturnValue(null)();
        },
        get attributeRuns() {
            return jest.fn().mockReturnValue(null)();
        },
        get characters() {
            return jest.fn().mockReturnValue(null)();
        },
        get end() {
            return jest.fn().mockReturnValue(null)();
        },
        get fileWrapper() {
            return jest.fn().mockReturnValue(null)();
        },
        get paragraphs() {
            return jest.fn().mockReturnValue(null)();
        },
        get range() {
            return jest.fn().mockReturnValue(null)();
        },
        get sentences() {
            return jest.fn().mockReturnValue(null)();
        },
        get start() {
            return jest.fn().mockReturnValue(null)();
        },
        get string() {
            return jest.fn().mockReturnValue(null)();
        },
        get style() {
            return jest.fn().mockReturnValue(null)();
        },
        get words() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Text;

// Mock for TextAlignment
const TextAlignment = {
    prototype: {
        Center: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Justified: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Left: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Natural: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Right: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get Center() {
            return jest.fn().mockReturnValue(null)();
        },
        get Justified() {
            return jest.fn().mockReturnValue(null)();
        },
        get Left() {
            return jest.fn().mockReturnValue(null)();
        },
        get Natural() {
            return jest.fn().mockReturnValue(null)();
        },
        get Right() {
            return jest.fn().mockReturnValue(null)();
        },
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default TextAlignment;

// Mock for TextComponent
const TextComponent = {
    prototype: {
        Attachments: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        AttributeRuns: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Characters: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Paragraphs: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Sentences: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Words: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get Attachments() {
            return jest.fn().mockReturnValue(null)();
        },
        get AttributeRuns() {
            return jest.fn().mockReturnValue(null)();
        },
        get Characters() {
            return jest.fn().mockReturnValue(null)();
        },
        get Paragraphs() {
            return jest.fn().mockReturnValue(null)();
        },
        get Sentences() {
            return jest.fn().mockReturnValue(null)();
        },
        get Words() {
            return jest.fn().mockReturnValue(null)();
        },
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default TextComponent;

// Mock for TimeZone
const TimeZone = {
    prototype: {
        abbreviations: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        abbreviation: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        daylightSavingTime: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        secondsFromGMT: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get abbreviations() {
            return jest.fn().mockReturnValue(null)();
        },
        get abbreviation() {
            return jest.fn().mockReturnValue(null)();
        },
        get daylightSavingTime() {
            return jest.fn().mockReturnValue(null)();
        },
        get secondsFromGMT() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default TimeZone;

// Mock for Timer
const Timer = {
    prototype: {
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        cancel: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        interval: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get interval() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Timer;

// Mock for ToolbarItem
const ToolbarItem = {
    prototype: {
        image: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        label: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        toolTip: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get image() {
            return jest.fn().mockReturnValue(null)();
        },
        get label() {
            return jest.fn().mockReturnValue(null)();
        },
        get toolTip() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default ToolbarItem;

// Mock for Tree
const Tree = {
    prototype: {
        nodeForObject: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        nodesForObjects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        reveal: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        select: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        copyNodes: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        paste: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        rootNode: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        selectedNodes: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get rootNode() {
            return jest.fn().mockReturnValue(null)();
        },
        get selectedNodes() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Tree;

// Mock for ContentTree
// Extends Tree
const ContentTree = {
};

export default ContentTree;

// Mock for SidebarTree
// Extends Tree
const SidebarTree = {
};

export default SidebarTree;

// Mock for TreeNode
const TreeNode = {
    prototype: {
        childAtIndex: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        expand: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        collapse: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        expandNote: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        collapseNote: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        reveal: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        canCollapse: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        canExpand: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        childCount: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        children: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        index: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isExpanded: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isNoteExpanded: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isRevealed: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isRootNode: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isSelectable: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isSelected: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        level: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        object: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        parent: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        rootNode: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get canCollapse() {
            return jest.fn().mockReturnValue(null)();
        },
        get canExpand() {
            return jest.fn().mockReturnValue(null)();
        },
        get childCount() {
            return jest.fn().mockReturnValue(null)();
        },
        get children() {
            return jest.fn().mockReturnValue(null)();
        },
        get index() {
            return jest.fn().mockReturnValue(null)();
        },
        get isExpanded() {
            return jest.fn().mockReturnValue(null)();
        },
        get isNoteExpanded() {
            return jest.fn().mockReturnValue(null)();
        },
        get isRevealed() {
            return jest.fn().mockReturnValue(null)();
        },
        get isRootNode() {
            return jest.fn().mockReturnValue(null)();
        },
        get isSelectable() {
            return jest.fn().mockReturnValue(null)();
        },
        get isSelected() {
            return jest.fn().mockReturnValue(null)();
        },
        get level() {
            return jest.fn().mockReturnValue(null)();
        },
        get object() {
            return jest.fn().mockReturnValue(null)();
        },
        get parent() {
            return jest.fn().mockReturnValue(null)();
        },
        get rootNode() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default TreeNode;

// Mock for TypeIdentifier
const TypeIdentifier = {
    prototype: {
        fromPathExtension: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        URL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        binaryPropertyList: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        csv: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        editableTypes: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        gif: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        image: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        jpeg: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        json: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        ofocus: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        pdf: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        plainText: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        png: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        propertyList: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        readableTypes: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        rtf: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        rtfd: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        taskPaper: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tasks: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tasksAndFolders: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tiff: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        writableTypes: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        xmlPropertyList: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        conformsTo: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        displayName: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        identifier: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        pathExtensions: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get URL() {
            return jest.fn().mockReturnValue(null)();
        },
        get binaryPropertyList() {
            return jest.fn().mockReturnValue(null)();
        },
        get csv() {
            return jest.fn().mockReturnValue(null)();
        },
        get editableTypes() {
            return jest.fn().mockReturnValue(null)();
        },
        get gif() {
            return jest.fn().mockReturnValue(null)();
        },
        get image() {
            return jest.fn().mockReturnValue(null)();
        },
        get jpeg() {
            return jest.fn().mockReturnValue(null)();
        },
        get json() {
            return jest.fn().mockReturnValue(null)();
        },
        get ofocus() {
            return jest.fn().mockReturnValue(null)();
        },
        get pdf() {
            return jest.fn().mockReturnValue(null)();
        },
        get plainText() {
            return jest.fn().mockReturnValue(null)();
        },
        get png() {
            return jest.fn().mockReturnValue(null)();
        },
        get propertyList() {
            return jest.fn().mockReturnValue(null)();
        },
        get readableTypes() {
            return jest.fn().mockReturnValue(null)();
        },
        get rtf() {
            return jest.fn().mockReturnValue(null)();
        },
        get rtfd() {
            return jest.fn().mockReturnValue(null)();
        },
        get taskPaper() {
            return jest.fn().mockReturnValue(null)();
        },
        get tasks() {
            return jest.fn().mockReturnValue(null)();
        },
        get tasksAndFolders() {
            return jest.fn().mockReturnValue(null)();
        },
        get tiff() {
            return jest.fn().mockReturnValue(null)();
        },
        get writableTypes() {
            return jest.fn().mockReturnValue(null)();
        },
        get xmlPropertyList() {
            return jest.fn().mockReturnValue(null)();
        },
        get displayName() {
            return jest.fn().mockReturnValue(null)();
        },
        get identifier() {
            return jest.fn().mockReturnValue(null)();
        },
        get pathExtensions() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default TypeIdentifier;

// Mock for URL
const URL = {
    prototype: {
        choose: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        chooseFolder: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fromString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fromPath: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tellScript: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tellFunction: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        currentAppScheme: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        documentsDirectory: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Function: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        call: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        open: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        find: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        toString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        appendingPathComponent: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        appendingPathExtension: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        deletingPathExtension: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        deletingLastPathComponent: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        absoluteString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        absoluteURL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        baseURL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        fragment: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        hasDirectoryPath: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        host: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isFileURL: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        lastPathComponent: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        password: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        path: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        pathComponents: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        pathExtension: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        port: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        query: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        relativePath: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        relativeString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        scheme: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        string: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        user: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get currentAppScheme() {
            return jest.fn().mockReturnValue(null)();
        },
        get documentsDirectory() {
            return jest.fn().mockReturnValue(null)();
        },
        get absoluteString() {
            return jest.fn().mockReturnValue(null)();
        },
        get absoluteURL() {
            return jest.fn().mockReturnValue(null)();
        },
        get baseURL() {
            return jest.fn().mockReturnValue(null)();
        },
        get fragment() {
            return jest.fn().mockReturnValue(null)();
        },
        get hasDirectoryPath() {
            return jest.fn().mockReturnValue(null)();
        },
        get host() {
            return jest.fn().mockReturnValue(null)();
        },
        get isFileURL() {
            return jest.fn().mockReturnValue(null)();
        },
        get lastPathComponent() {
            return jest.fn().mockReturnValue(null)();
        },
        get password() {
            return jest.fn().mockReturnValue(null)();
        },
        get path() {
            return jest.fn().mockReturnValue(null)();
        },
        get pathComponents() {
            return jest.fn().mockReturnValue(null)();
        },
        get pathExtension() {
            return jest.fn().mockReturnValue(null)();
        },
        get port() {
            return jest.fn().mockReturnValue(null)();
        },
        get query() {
            return jest.fn().mockReturnValue(null)();
        },
        get relativePath() {
            return jest.fn().mockReturnValue(null)();
        },
        get relativeString() {
            return jest.fn().mockReturnValue(null)();
        },
        get scheme() {
            return jest.fn().mockReturnValue(null)();
        },
        get string() {
            return jest.fn().mockReturnValue(null)();
        },
        get user() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default URL;

// Mock for UnderlineAffinity
const UnderlineAffinity = {
    prototype: {
        ByWord: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        None: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get ByWord() {
            return jest.fn().mockReturnValue(null)();
        },
        get None() {
            return jest.fn().mockReturnValue(null)();
        },
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default UnderlineAffinity;

// Mock for UnderlinePattern
const UnderlinePattern = {
    prototype: {
        Dash: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        DashDot: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        DashDotDot: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Dot: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Solid: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get Dash() {
            return jest.fn().mockReturnValue(null)();
        },
        get DashDot() {
            return jest.fn().mockReturnValue(null)();
        },
        get DashDotDot() {
            return jest.fn().mockReturnValue(null)();
        },
        get Dot() {
            return jest.fn().mockReturnValue(null)();
        },
        get Solid() {
            return jest.fn().mockReturnValue(null)();
        },
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default UnderlinePattern;

// Mock for UnderlineStyle
const UnderlineStyle = {
    prototype: {
        Double: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        None: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Single: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        Thick: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        all: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get Double() {
            return jest.fn().mockReturnValue(null)();
        },
        get None() {
            return jest.fn().mockReturnValue(null)();
        },
        get Single() {
            return jest.fn().mockReturnValue(null)();
        },
        get Thick() {
            return jest.fn().mockReturnValue(null)();
        },
        get all() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default UnderlineStyle;

// Mock for Version
const Version = {
    prototype: {
        constructor: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        equals: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        atLeast: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isAfter: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isBefore: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        versionString: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get versionString() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default Version;

// Mock for Window
const Window = {
    prototype: {
        close: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
    },
};

export default Window;

// Mock for DocumentWindow
// Extends Window
const DocumentWindow = {
    prototype: {
        selectObjects: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        forecastDayForDate: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        selectForecastDays: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        content: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        focus: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        inspectorVisible: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isCompact: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        isTab: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        perspective: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        selection: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        sidebar: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        sidebarVisible: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        tabGroupWindows: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        toolbarVisible: jest.fn().mockImplementation(() => {
            return Promise.resolve();
        }),
        get content() {
            return jest.fn().mockReturnValue(null)();
        },
        get focus() {
            return jest.fn().mockReturnValue(null)();
        },
        get inspectorVisible() {
            return jest.fn().mockReturnValue(null)();
        },
        get isCompact() {
            return jest.fn().mockReturnValue(null)();
        },
        get isTab() {
            return jest.fn().mockReturnValue(null)();
        },
        get perspective() {
            return jest.fn().mockReturnValue(null)();
        },
        get selection() {
            return jest.fn().mockReturnValue(null)();
        },
        get sidebar() {
            return jest.fn().mockReturnValue(null)();
        },
        get sidebarVisible() {
            return jest.fn().mockReturnValue(null)();
        },
        get tabGroupWindows() {
            return jest.fn().mockReturnValue(null)();
        },
        get toolbarVisible() {
            return jest.fn().mockReturnValue(null)();
        },
    },
};

export default DocumentWindow;

// Mock for XML
const XML = {
};

export default XML;

